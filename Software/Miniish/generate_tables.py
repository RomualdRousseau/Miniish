import numpy as np
import matplotlib.pyplot as plt

from miniish.pyco.synth.locals import *
from miniish.pyco.synth.envelopes import *
from miniish.pyco.synth.modulators import *
from miniish.pyco.synth.oscillators import *

def generates_tables(n, y, ymin = 0, ymax = 255):
    print("const PROGMEM char %s[256]="%n);
    print("{");
    for i, e in enumerate(y):
        ev = min(max(ymin, e), ymax)
        if i < 255:
            print("\t%d,\t\t//%d"%(ev, i))
        else:
            print("\t%d\t\t//%d"%(ev, i))
    print("};")
    print()
    plt.plot(y)


def generates_tables_with_volumes(n, y, ymin = 0, ymax = 255):
    print("const PROGMEM char %s[][256]="%n);
    print("{");
    for j, v in enumerate((0.25, 0.5, 0.75, 1)):
        print("\t{");
        for i, e in enumerate(y):
            ev = min(max(ymin, e * v), ymax)
            if i < 255:
                print("\t\t%d,\t\t//%d"%(ev, i))
            else:
                print("\t\t%d\t\t//%d"%(ev, i))
        if j < 3:
            print("\t},")
        else:
            print("\t}")
    print("};")
    print()
    plt.plot(y)


print("/*")
print(" * !!! WARNING !!!")
print(" * This code was generated byb a tool.")
print(" * Do not edit this file. Changes will be lost if the code is regenarated.")
print(" */")
print()

t= np.linspace(0, 1, 256, False)

generates_tables("SinTable", sin(TWO_PI * t) * 128, -127, 127) 
generates_tables("TriangleTable", triangle(TWO_PI * t) * 128, -127, 127) 
generates_tables("SquareTable", square(TWO_PI * t) * 128, -127, 127) 
generates_tables("SawTable", sawtooth(TWO_PI * t) * 128, -127, 127) 
generates_tables("RampTable", ramp(TWO_PI * t) * 128, -127, 127) 
generates_tables("NoiseTable", noise(TWO_PI * t) * 128, -127, 127) 

generates_tables_with_volumes("Env0", effect_env_fade_in(t) * 256)
generates_tables_with_volumes("Env1", effect_env_fade_out(t) * 256)
generates_tables_with_volumes("Env2", effect_frq_drop(t, 0, 1) * 128 + 127)
generates_tables_with_volumes("Env3", effect_frq_vibrato(t, 0, 0) * 16 + 240)

plt.show()
