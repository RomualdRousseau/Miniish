/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module cu_top_0 (
    input clk,
    input rst_n,
    input port_enb,
    input port_clk,
    inout port_rw,
    inout [15:0] port_address,
    inout [7:0] port_data,
    output reg port_data_rw,
    output reg port_dmab,
    output reg port_nmib,
    output reg hsync,
    output reg vsync,
    output reg hblank,
    output reg vblank,
    output reg [5:0] rgb,
    output reg debug
  );
  
  reg [0:0] IO_port_rw_enable;
  wire [0:0] IO_port_rw_read;
  reg [0:0] IO_port_rw_write;
  assign port_rw = IO_port_rw_enable ? IO_port_rw_write : 1'bz;
  assign IO_port_rw_read = port_rw;
  reg [15:0] IO_port_address_enable;
  wire [15:0] IO_port_address_read;
  reg [15:0] IO_port_address_write;
  genvar GEN_port_address;
  generate
    for (GEN_port_address = 0; GEN_port_address < 16; GEN_port_address = GEN_port_address + 1) begin
      assign port_address[GEN_port_address] = IO_port_address_enable[GEN_port_address] ? IO_port_address_write[GEN_port_address] : 1'bz;
    end
  endgenerate
  assign IO_port_address_read = port_address;
  reg [7:0] IO_port_data_enable;
  wire [7:0] IO_port_data_read;
  reg [7:0] IO_port_data_write;
  genvar GEN_port_data;
  generate
    for (GEN_port_data = 0; GEN_port_data < 8; GEN_port_data = GEN_port_data + 1) begin
      assign port_data[GEN_port_data] = IO_port_data_enable[GEN_port_data] ? IO_port_data_write[GEN_port_data] : 1'bz;
    end
  endgenerate
  assign IO_port_data_read = port_data;
  
  
  localparam PALETTE = 96'hfb698b33ce31fea564252040;
  
  reg rst;
  
  wire [1-1:0] M_this_reset_cond_out;
  reg [1-1:0] M_this_reset_cond_in;
  reset_conditioner_1 this_reset_cond (
    .clk(clk),
    .in(M_this_reset_cond_in),
    .out(M_this_reset_cond_out)
  );
  wire [1-1:0] M_this_start_address_delay_out;
  reg [1-1:0] M_this_start_address_delay_in;
  edge_detector_with_delay_2 this_start_address_delay (
    .clk(clk),
    .in(M_this_start_address_delay_in),
    .out(M_this_start_address_delay_out)
  );
  wire [1-1:0] M_this_start_data_delay_out;
  reg [1-1:0] M_this_start_data_delay_in;
  edge_detector_with_delay_3 this_start_data_delay (
    .clk(clk),
    .in(M_this_start_data_delay_in),
    .out(M_this_start_data_delay_out)
  );
  wire [1-1:0] M_this_vga_signals_hsync;
  wire [1-1:0] M_this_vga_signals_hblank;
  wire [1-1:0] M_this_vga_signals_vsync;
  wire [1-1:0] M_this_vga_signals_vblank;
  wire [14-1:0] M_this_vga_signals_address;
  vga_signals_4 this_vga_signals (
    .clk(clk),
    .rst(rst),
    .hsync(M_this_vga_signals_hsync),
    .hblank(M_this_vga_signals_hblank),
    .vsync(M_this_vga_signals_vsync),
    .vblank(M_this_vga_signals_vblank),
    .address(M_this_vga_signals_address)
  );
  reg [13:0] M_current_address_d, M_current_address_q = 1'h0;
  reg [3:0] M_current_data_d, M_current_data_q = 1'h0;
  localparam WAIT_state = 3'd0;
  localparam WRITE_HIGH_ADDRESS_state = 3'd1;
  localparam WRITE_LOW_ADDRESS_state = 3'd2;
  localparam WRITE_DATA_state = 3'd3;
  localparam WRITE_DATA_HOLD_state = 3'd4;
  localparam HOLD_state = 3'd5;
  
  reg [2:0] M_state_d, M_state_q = WAIT_state;
  
  wire [4-1:0] M_this_vram_read_data;
  reg [14-1:0] M_this_vram_waddr;
  reg [4-1:0] M_this_vram_write_data;
  reg [1-1:0] M_this_vram_write_en;
  reg [14-1:0] M_this_vram_raddr;
  simple_dual_ram_5 #(.SIZE(3'h4), .DEPTH(16'h4000)) this_vram (
    .rclk(clk),
    .wclk(clk),
    .waddr(M_this_vram_waddr),
    .write_data(M_this_vram_write_data),
    .write_en(M_this_vram_write_en),
    .raddr(M_this_vram_raddr),
    .read_data(M_this_vram_read_data)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_current_address_d = M_current_address_q;
    M_current_data_d = M_current_data_q;
    
    M_this_reset_cond_in = ~rst_n;
    rst = M_this_reset_cond_out;
    IO_port_rw_enable = 1'h0;
    IO_port_rw_write = 1'h0;
    IO_port_address_enable = 1'h0;
    IO_port_address_write = 1'h0;
    IO_port_data_enable = 1'h0;
    IO_port_data_write = 1'h0;
    M_this_start_address_delay_in = port_clk || port_enb;
    M_this_start_data_delay_in = port_clk || port_enb;
    M_this_vram_raddr = M_this_vga_signals_address;
    M_this_vram_waddr = M_current_address_q;
    M_this_vram_write_data = M_current_data_q;
    M_this_vram_write_en = 1'h0;
    debug = 1'h0;
    
    case (M_state_q)
      WAIT_state: begin
        if (M_this_start_address_delay_out && !port_enb) begin
          
          case (IO_port_address_read[0+7-:8])
            8'h00: begin
              if (!IO_port_rw_read) begin
                M_state_d = WRITE_HIGH_ADDRESS_state;
              end
            end
            8'h01: begin
              if (!IO_port_rw_read) begin
                M_state_d = WRITE_LOW_ADDRESS_state;
              end
            end
            8'h02: begin
              if (!IO_port_rw_read) begin
                M_state_d = WRITE_DATA_state;
              end
            end
          endcase
        end
      end
      WRITE_HIGH_ADDRESS_state: begin
        if (M_this_start_data_delay_out) begin
          if (!port_enb) begin
            M_state_d = HOLD_state;
            M_current_address_d[7+6-:7] = IO_port_data_read[0+6-:7];
          end else begin
            M_state_d = WAIT_state;
          end
        end
      end
      WRITE_LOW_ADDRESS_state: begin
        if (M_this_start_data_delay_out) begin
          if (!port_enb) begin
            M_state_d = HOLD_state;
            M_current_address_d[0+6-:7] = IO_port_data_read[0+6-:7];
          end else begin
            M_state_d = WAIT_state;
          end
        end
      end
      WRITE_DATA_state: begin
        if (M_this_start_data_delay_out) begin
          if (!port_enb) begin
            M_state_d = WRITE_DATA_HOLD_state;
            M_current_data_d = IO_port_data_read[0+3-:4];
          end else begin
            M_state_d = WAIT_state;
          end
        end
      end
      WRITE_DATA_HOLD_state: begin
        M_state_d = HOLD_state;
        M_this_vram_write_en = 1'h1;
        debug = 1'h1;
      end
      HOLD_state: begin
        if (port_enb) begin
          M_state_d = WAIT_state;
        end
      end
    endcase
    port_data_rw = (!IO_port_rw_read & 1'h1) | (IO_port_rw_read & 1'h0);
    port_dmab = 1'h1;
    port_nmib = !M_this_vga_signals_vblank;
    hsync = M_this_vga_signals_hsync;
    vsync = M_this_vga_signals_vsync;
    hblank = M_this_vga_signals_hblank;
    vblank = M_this_vga_signals_vblank;
    if (!M_this_vga_signals_hblank && !M_this_vga_signals_vblank) begin
      rgb = PALETTE[(M_this_vram_read_data)*6+5-:6];
    end else begin
      rgb = 6'h00;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_current_address_q <= 1'h0;
      M_current_data_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_current_address_q <= M_current_address_d;
      M_current_data_q <= M_current_data_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
