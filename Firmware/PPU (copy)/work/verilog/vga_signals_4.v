/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module vga_signals_4 (
    input clk,
    input rst,
    output reg hsync,
    output reg hblank,
    output reg vsync,
    output reg vblank,
    output reg [13:0] address
  );
  
  
  
  localparam WIDTH = 8'h80;
  
  localparam HEIGHT = 8'h80;
  
  localparam PIXEL_SIZE = 2'h3;
  
  localparam HVA_T = 10'h280;
  
  localparam HFP_T = 11'h290;
  
  localparam HSP_T = 12'h2f0;
  
  localparam HBP_T = 13'h0320;
  
  localparam VVA_T = 9'h1e0;
  
  localparam VFP_T = 10'h1ea;
  
  localparam VSP_T = 11'h1ec;
  
  localparam VBP_T = 12'h20d;
  
  localparam HMIN_T = 11'h080;
  
  localparam HMAX_T = 12'h200;
  
  localparam VMIN_T = 11'h030;
  
  localparam VMAX_T = 12'h1b0;
  
  localparam FREQ_DIV = 3'h4;
  
  localparam HMIN_hstate = 3'd0;
  localparam HMAX_hstate = 3'd1;
  localparam HVA_hstate = 3'd2;
  localparam HFP_hstate = 3'd3;
  localparam HSP_hstate = 3'd4;
  localparam HBP_hstate = 3'd5;
  
  reg [2:0] M_hstate_d, M_hstate_q = HMIN_hstate;
  localparam VMIN_vstate = 3'd0;
  localparam VMAX_vstate = 3'd1;
  localparam VVA_vstate = 3'd2;
  localparam VFP_vstate = 3'd3;
  localparam VSP_vstate = 3'd4;
  localparam VBP_vstate = 3'd5;
  
  reg [2:0] M_vstate_d, M_vstate_q = VMIN_vstate;
  reg [11:0] M_hcounter_d, M_hcounter_q = 1'h0;
  reg [11:0] M_haddress_d, M_haddress_q = 1'h0;
  reg [9:0] M_vcounter_d, M_vcounter_q = 1'h0;
  reg [9:0] M_vaddress_d, M_vaddress_q = 1'h0;
  
  always @* begin
    M_hstate_d = M_hstate_q;
    M_vstate_d = M_vstate_q;
    M_vcounter_d = M_vcounter_q;
    M_hcounter_d = M_hcounter_q;
    M_vaddress_d = M_vaddress_q;
    M_haddress_d = M_haddress_q;
    
    hsync = 1'h1;
    vsync = 1'h0;
    hblank = 1'h1;
    vblank = 1'h1;
    address[0+6-:7] = M_haddress_q / 3'h4 / 2'h3;
    address[7+6-:7] = M_vaddress_q / 2'h3;
    M_hcounter_d = M_hcounter_q + 1'h1;
    
    case (M_hstate_q)
      HMIN_hstate: begin
        if (M_hcounter_q == 15'h01ff) begin
          M_hstate_d = HMAX_hstate;
        end
      end
      HMAX_hstate: begin
        hblank = 1'h0;
        M_haddress_d = M_haddress_q + 1'h1;
        if (M_hcounter_q == 16'h07ff) begin
          M_hstate_d = HVA_hstate;
        end
      end
      HVA_hstate: begin
        if (M_hcounter_q == 14'h09ff) begin
          M_hstate_d = HFP_hstate;
        end
      end
      HFP_hstate: begin
        if (M_hcounter_q == 15'h0a3f) begin
          M_hstate_d = HSP_hstate;
        end
      end
      HSP_hstate: begin
        hsync = 1'h0;
        if (M_hcounter_q == 16'h0bbf) begin
          M_hstate_d = HBP_hstate;
        end
      end
      HBP_hstate: begin
        if (M_hcounter_q == 17'h00c7f) begin
          M_hstate_d = HMIN_hstate;
          M_hcounter_d = 1'h0;
          M_haddress_d = 1'h0;
          M_vcounter_d = M_vcounter_q + 1'h1;
          M_vaddress_d = M_vaddress_q + 1'h1;
        end
      end
    endcase
    
    case (M_vstate_q)
      VMIN_vstate: begin
        if (M_vcounter_q == 11'h030) begin
          M_vstate_d = VMAX_vstate;
          M_vaddress_d = 1'h0;
        end
      end
      VMAX_vstate: begin
        vblank = 1'h0;
        if (M_vcounter_q == 12'h1b0) begin
          M_vstate_d = VVA_vstate;
        end
      end
      VVA_vstate: begin
        if (M_vcounter_q == 9'h1e0) begin
          M_vstate_d = VFP_vstate;
        end
      end
      VFP_vstate: begin
        if (M_vcounter_q == 10'h1ea) begin
          M_vstate_d = VSP_vstate;
        end
      end
      VSP_vstate: begin
        vsync = 1'h1;
        if (M_vcounter_q == 11'h1ec) begin
          M_vstate_d = VBP_vstate;
        end
      end
      VBP_vstate: begin
        if (M_vcounter_q == 12'h20d) begin
          M_vstate_d = VMIN_vstate;
          M_vcounter_d = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_hcounter_q <= 1'h0;
      M_haddress_q <= 1'h0;
      M_vcounter_q <= 1'h0;
      M_vaddress_q <= 1'h0;
      M_hstate_q <= 1'h0;
      M_vstate_q <= 1'h0;
    end else begin
      M_hcounter_q <= M_hcounter_d;
      M_haddress_q <= M_haddress_d;
      M_vcounter_q <= M_vcounter_d;
      M_vaddress_q <= M_vaddress_d;
      M_hstate_q <= M_hstate_d;
      M_vstate_q <= M_vstate_d;
    end
  end
  
endmodule
