/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module vga_signals_6 (
    input clk,
    input rst,
    output reg hsync,
    output reg hblank,
    output reg vsync,
    output reg vblank,
    output reg [13:0] address
  );
  
  
  
  localparam WIDTH = 8'h80;
  
  localparam HEIGHT = 8'h80;
  
  localparam PIXEL_SIZE = 2'h3;
  
  localparam HVA_T = 10'h280;
  
  localparam HFP_T = 11'h290;
  
  localparam HSP_T = 12'h2f0;
  
  localparam HBP_T = 13'h0320;
  
  localparam VVA_T = 9'h1e0;
  
  localparam VFP_T = 10'h1ea;
  
  localparam VSP_T = 11'h1ec;
  
  localparam VBP_T = 12'h20d;
  
  localparam HMIN_T = 11'h080;
  
  localparam HMAX_T = 12'h200;
  
  localparam VMIN_T = 11'h030;
  
  localparam VMAX_T = 12'h1b0;
  
  reg [11:0] M_hcounter_d, M_hcounter_q = 1'h0;
  reg [9:0] M_vcounter_d, M_vcounter_q = 1'h0;
  
  integer hvisibility;
  
  integer vvisibility;
  
  always @* begin
    hsync = M_hcounter_q >= 11'h290 && M_hcounter_q < 12'h2f0 ? 1'h0 : 1'h1;
    vsync = M_vcounter_q >= 10'h1ea && M_vcounter_q < 11'h1ec ? 1'h0 : 1'h1;
    hvisibility = M_hcounter_q >= 11'h080 && M_hcounter_q < 12'h200 ? 1'h1 : 1'h0;
    vvisibility = M_vcounter_q >= 11'h030 && M_vcounter_q < 12'h1b0 ? 1'h1 : 1'h0;
    hblank = ~hvisibility;
    vblank = ~vvisibility;
    if (hvisibility && vvisibility) begin
      address[0+6-:7] = (M_hcounter_q - 11'h080) / 2'h3;
      address[7+6-:7] = (M_vcounter_q - 11'h030) / 2'h3;
    end else begin
      address = 1'h0;
    end
  end
  
  always @* begin
    M_vcounter_d = M_vcounter_q;
    M_hcounter_d = M_hcounter_q;
    
    if (M_hcounter_q < 13'h0320) begin
      M_hcounter_d = M_hcounter_q + 1'h1;
    end else begin
      M_hcounter_d = 1'h0;
      if (M_vcounter_q < 12'h20d) begin
        M_vcounter_d = M_vcounter_q + 1'h1;
      end else begin
        M_vcounter_d = 1'h0;
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_hcounter_q <= 1'h0;
      M_vcounter_q <= 1'h0;
    end else begin
      M_hcounter_q <= M_hcounter_d;
      M_vcounter_q <= M_vcounter_d;
    end
  end
  
endmodule
