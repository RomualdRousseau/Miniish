/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module cu_top_0 (
    input clk,
    input rst_n,
    input port_enb,
    input port_clk,
    inout port_rw,
    inout [15:0] port_address,
    inout [7:0] port_data,
    output reg port_data_rw,
    output reg port_dmab,
    output reg port_nmib,
    output reg hsync,
    output reg vsync,
    output reg hblank,
    output reg vblank,
    output reg [5:0] rgb,
    output reg [1:0] debug
  );
  
  reg [0:0] IO_port_rw_enable;
  wire [0:0] IO_port_rw_read;
  reg [0:0] IO_port_rw_write;
  assign port_rw = IO_port_rw_enable ? IO_port_rw_write : 1'bz;
  assign IO_port_rw_read = port_rw;
  reg [15:0] IO_port_address_enable;
  wire [15:0] IO_port_address_read;
  reg [15:0] IO_port_address_write;
  genvar GEN_port_address;
  generate
    for (GEN_port_address = 0; GEN_port_address < 16; GEN_port_address = GEN_port_address + 1) begin
      assign port_address[GEN_port_address] = IO_port_address_enable[GEN_port_address] ? IO_port_address_write[GEN_port_address] : 1'bz;
    end
  endgenerate
  assign IO_port_address_read = port_address;
  reg [7:0] IO_port_data_enable;
  wire [7:0] IO_port_data_read;
  reg [7:0] IO_port_data_write;
  genvar GEN_port_data;
  generate
    for (GEN_port_data = 0; GEN_port_data < 8; GEN_port_data = GEN_port_data + 1) begin
      assign port_data[GEN_port_data] = IO_port_data_enable[GEN_port_data] ? IO_port_data_write[GEN_port_data] : 1'bz;
    end
  endgenerate
  assign IO_port_data_read = port_data;
  
  
  reg rst;
  
  reg dma;
  
  localparam INIT_this_state = 4'd0;
  localparam DMA_START_MAP_this_state = 4'd1;
  localparam DMA_TRANSFER_MAP_this_state = 4'd2;
  localparam DMA_START_SPRITE_this_state = 4'd3;
  localparam DMA_TRANSFER_SPRITE_1_this_state = 4'd4;
  localparam DMA_TRANSFER_SPRITE_2_this_state = 4'd5;
  localparam WAIT_this_state = 4'd6;
  localparam WRITE_HIGH_ADDRESS_this_state = 4'd7;
  localparam WRITE_LOW_ADDRESS_this_state = 4'd8;
  localparam WRITE_DATA_this_state = 4'd9;
  
  reg [3:0] M_this_state_d, M_this_state_q = INIT_this_state;
  reg [15:0] M_this_external_address_d, M_this_external_address_q = 1'h0;
  reg [13:0] M_this_sprites_address_d, M_this_sprites_address_q = 1'h0;
  reg [9:0] M_this_map_address_d, M_this_map_address_q = 1'h0;
  reg [13:0] M_this_data_count_d, M_this_data_count_q = 1'h0;
  wire [1-1:0] M_this_reset_cond_out;
  reg [1-1:0] M_this_reset_cond_in;
  reset_conditioner_1 this_reset_cond (
    .clk(clk),
    .in(M_this_reset_cond_in),
    .out(M_this_reset_cond_out)
  );
  wire [1-1:0] M_this_delay_clk_out;
  reg [1-1:0] M_this_delay_clk_in;
  pipeline_2 this_delay_clk (
    .clk(clk),
    .in(M_this_delay_clk_in),
    .out(M_this_delay_clk_out)
  );
  wire [1-1:0] M_this_start_address_delay_out;
  reg [1-1:0] M_this_start_address_delay_in;
  edge_detector_3 this_start_address_delay (
    .clk(clk),
    .in(M_this_start_address_delay_in),
    .out(M_this_start_address_delay_out)
  );
  wire [1-1:0] M_this_start_data_delay_out;
  reg [1-1:0] M_this_start_data_delay_in;
  edge_detector_4 this_start_data_delay (
    .clk(clk),
    .in(M_this_start_data_delay_in),
    .out(M_this_start_data_delay_out)
  );
  
  wire [1-1:0] M_this_pixel_clk_out;
  pixel_clock_5 this_pixel_clk (
    .clk(clk),
    .rst(rst),
    .out(M_this_pixel_clk_out)
  );
  
  wire [1-1:0] M_this_vga_signals_pixel_clk;
  wire [1-1:0] M_this_vga_signals_line_clk;
  wire [1-1:0] M_this_vga_signals_hsync;
  wire [1-1:0] M_this_vga_signals_vsync;
  wire [1-1:0] M_this_vga_signals_hblank;
  wire [1-1:0] M_this_vga_signals_vblank;
  wire [14-1:0] M_this_vga_signals_address;
  vga_signals_6 this_vga_signals (
    .clk(M_this_pixel_clk_out),
    .rst(rst),
    .pixel_clk(M_this_vga_signals_pixel_clk),
    .line_clk(M_this_vga_signals_line_clk),
    .hsync(M_this_vga_signals_hsync),
    .vsync(M_this_vga_signals_vsync),
    .hblank(M_this_vga_signals_hblank),
    .vblank(M_this_vga_signals_vblank),
    .address(M_this_vga_signals_address)
  );
  
  wire [6-1:0] M_this_vga_ramdac_rgb;
  reg [1-1:0] M_this_vga_ramdac_en;
  reg [4-1:0] M_this_vga_ramdac_vram_data;
  vga_ramdac_7 this_vga_ramdac (
    .clk(M_this_vga_signals_pixel_clk),
    .rst(rst),
    .en(M_this_vga_ramdac_en),
    .vram_data(M_this_vga_ramdac_vram_data),
    .rgb(M_this_vga_ramdac_rgb)
  );
  
  wire [8-1:0] M_this_ppu_vram_addr;
  wire [1-1:0] M_this_ppu_vram_en;
  wire [4-1:0] M_this_ppu_vram_data;
  wire [14-1:0] M_this_ppu_sprites_addr;
  wire [10-1:0] M_this_ppu_map_addr;
  reg [1-1:0] M_this_ppu_vga_is_drawing;
  reg [4-1:0] M_this_ppu_sprites_data;
  reg [8-1:0] M_this_ppu_map_data;
  ppu_8 this_ppu (
    .clk(clk),
    .rst(rst),
    .vga_line_clk(M_this_vga_signals_line_clk),
    .vga_is_drawing(M_this_ppu_vga_is_drawing),
    .sprites_data(M_this_ppu_sprites_data),
    .map_data(M_this_ppu_map_data),
    .vram_addr(M_this_ppu_vram_addr),
    .vram_en(M_this_ppu_vram_en),
    .vram_data(M_this_ppu_vram_data),
    .sprites_addr(M_this_ppu_sprites_addr),
    .map_addr(M_this_ppu_map_addr)
  );
  
  wire [4-1:0] M_this_sprites_ram_read_data;
  reg [14-1:0] M_this_sprites_ram_waddr;
  reg [4-1:0] M_this_sprites_ram_write_data;
  reg [1-1:0] M_this_sprites_ram_write_en;
  reg [14-1:0] M_this_sprites_ram_raddr;
  simple_dual_ram_9 #(.SIZE(3'h4), .DEPTH(16'h4000)) this_sprites_ram (
    .rclk(clk),
    .wclk(clk),
    .waddr(M_this_sprites_ram_waddr),
    .write_data(M_this_sprites_ram_write_data),
    .write_en(M_this_sprites_ram_write_en),
    .raddr(M_this_sprites_ram_raddr),
    .read_data(M_this_sprites_ram_read_data)
  );
  
  wire [8-1:0] M_this_map_ram_read_data;
  reg [10-1:0] M_this_map_ram_waddr;
  reg [8-1:0] M_this_map_ram_write_data;
  reg [1-1:0] M_this_map_ram_write_en;
  reg [10-1:0] M_this_map_ram_raddr;
  simple_dual_ram_10 #(.SIZE(4'h8), .DEPTH(12'h400)) this_map_ram (
    .rclk(clk),
    .wclk(clk),
    .waddr(M_this_map_ram_waddr),
    .write_data(M_this_map_ram_write_data),
    .write_en(M_this_map_ram_write_en),
    .raddr(M_this_map_ram_raddr),
    .read_data(M_this_map_ram_read_data)
  );
  
  wire [4-1:0] M_this_vram_read_data;
  reg [8-1:0] M_this_vram_waddr;
  reg [4-1:0] M_this_vram_write_data;
  reg [1-1:0] M_this_vram_write_en;
  reg [8-1:0] M_this_vram_raddr;
  simple_dual_ram_11 #(.SIZE(3'h4), .DEPTH(10'h100)) this_vram (
    .rclk(clk),
    .wclk(clk),
    .waddr(M_this_vram_waddr),
    .write_data(M_this_vram_write_data),
    .write_en(M_this_vram_write_en),
    .raddr(M_this_vram_raddr),
    .read_data(M_this_vram_read_data)
  );
  
  always @* begin
    M_this_state_d = M_this_state_q;
    M_this_sprites_address_d = M_this_sprites_address_q;
    M_this_external_address_d = M_this_external_address_q;
    M_this_map_address_d = M_this_map_address_q;
    M_this_data_count_d = M_this_data_count_q;
    
    M_this_reset_cond_in = ~rst_n;
    rst = M_this_reset_cond_out;
    dma = M_this_state_q == DMA_START_SPRITE_this_state || M_this_state_q == DMA_TRANSFER_SPRITE_1_this_state || M_this_state_q == DMA_TRANSFER_SPRITE_2_this_state ? 1'h1 : 1'h0;
    IO_port_rw_enable = dma;
    IO_port_rw_write = 1'h1;
    IO_port_address_enable = {5'h10{dma}};
    IO_port_address_write = M_this_external_address_q;
    IO_port_data_enable = 1'h0;
    IO_port_data_write = 1'h0;
    port_data_rw = !IO_port_rw_read || dma ? 1'h1 : 1'h0;
    port_dmab = ~dma;
    port_nmib = !M_this_vga_signals_vblank || dma ? 1'h1 : 1'h0;
    hsync = M_this_vga_signals_hsync;
    vsync = M_this_vga_signals_vsync;
    hblank = M_this_vga_signals_hblank;
    vblank = M_this_vga_signals_vblank;
    rgb = M_this_vga_ramdac_rgb;
    M_this_delay_clk_in = port_clk;
    M_this_start_address_delay_in = M_this_delay_clk_out || port_enb;
    M_this_start_data_delay_in = M_this_delay_clk_out || port_enb;
    M_this_vram_raddr = M_this_vga_signals_address[0+7-:8];
    M_this_vram_waddr = M_this_ppu_vram_addr;
    M_this_vram_write_en = M_this_ppu_vram_en;
    M_this_vram_write_data = M_this_ppu_vram_data;
    M_this_sprites_ram_raddr = M_this_ppu_sprites_addr;
    M_this_sprites_ram_waddr = M_this_sprites_address_q;
    M_this_sprites_ram_write_en = 1'h0;
    M_this_sprites_ram_write_data = 1'h0;
    M_this_map_ram_raddr = M_this_ppu_map_addr;
    M_this_map_ram_waddr = M_this_map_address_q;
    M_this_map_ram_write_en = 1'h0;
    M_this_map_ram_write_data = 1'h0;
    M_this_vga_ramdac_en = !M_this_vga_signals_hblank && !M_this_vga_signals_vblank;
    M_this_vga_ramdac_vram_data = M_this_vram_read_data;
    M_this_ppu_vga_is_drawing = !dma && !M_this_vga_signals_vblank;
    M_this_ppu_sprites_data = M_this_sprites_ram_read_data;
    M_this_ppu_map_data = M_this_map_ram_read_data;
    debug[0+0-:1] = 1'h0;
    debug[1+0-:1] = 1'h0;
    
    case (M_this_state_q)
      INIT_this_state: begin
        M_this_external_address_d = 16'ha000;
        M_this_sprites_address_d = 1'h0;
        M_this_data_count_d = 15'h2000;
        M_this_state_d = DMA_START_SPRITE_this_state;
      end
      DMA_START_MAP_this_state: begin
        if (M_this_data_count_q == 1'h0) begin
          M_this_state_d = WAIT_this_state;
        end else begin
          if (M_this_start_address_delay_out) begin
            M_this_state_d = DMA_TRANSFER_MAP_this_state;
          end
        end
      end
      DMA_TRANSFER_MAP_this_state: begin
        if (M_this_start_data_delay_out) begin
          M_this_map_ram_write_en = 1'h1;
          M_this_map_ram_write_data = IO_port_data_read;
          M_this_map_address_d = M_this_map_address_q + 1'h1;
          M_this_external_address_d = M_this_external_address_q + 1'h1;
          M_this_data_count_d = M_this_data_count_q - 1'h1;
          M_this_state_d = DMA_START_MAP_this_state;
        end
      end
      DMA_START_SPRITE_this_state: begin
        if (M_this_data_count_q == 1'h0) begin
          M_this_state_d = WAIT_this_state;
        end else begin
          if (M_this_start_address_delay_out) begin
            M_this_state_d = DMA_TRANSFER_SPRITE_1_this_state;
          end
        end
      end
      DMA_TRANSFER_SPRITE_1_this_state: begin
        if (M_this_start_data_delay_out) begin
          M_this_sprites_ram_write_en = 1'h1;
          M_this_sprites_ram_write_data = IO_port_data_read[4+3-:4];
          M_this_sprites_address_d = M_this_sprites_address_q + 1'h1;
          M_this_state_d = DMA_TRANSFER_SPRITE_2_this_state;
        end
      end
      DMA_TRANSFER_SPRITE_2_this_state: begin
        M_this_sprites_ram_write_en = 1'h1;
        M_this_sprites_ram_write_data = IO_port_data_read[0+3-:4];
        M_this_sprites_address_d = M_this_sprites_address_q + 1'h1;
        M_this_external_address_d = M_this_external_address_q + 1'h1;
        M_this_data_count_d = M_this_data_count_q - 1'h1;
        M_this_state_d = DMA_START_SPRITE_this_state;
      end
      WAIT_this_state: begin
        if (M_this_start_address_delay_out) begin
          
          case (IO_port_address_read[0+7-:8])
            8'h00: begin
              if (!IO_port_rw_read) begin
                M_this_state_d = WRITE_HIGH_ADDRESS_this_state;
              end
            end
            8'h01: begin
              if (!IO_port_rw_read) begin
                M_this_state_d = WRITE_LOW_ADDRESS_this_state;
              end
            end
            8'h02: begin
              if (!IO_port_rw_read) begin
                M_this_state_d = WRITE_DATA_this_state;
              end
            end
          endcase
        end
      end
      WRITE_HIGH_ADDRESS_this_state: begin
        if (M_this_start_data_delay_out) begin
          M_this_sprites_address_d[7+6-:7] = IO_port_data_read[0+6-:7];
          M_this_state_d = WAIT_this_state;
        end
      end
      WRITE_LOW_ADDRESS_this_state: begin
        if (M_this_start_data_delay_out) begin
          M_this_sprites_address_d[0+6-:7] = IO_port_data_read[0+6-:7];
          M_this_state_d = WAIT_this_state;
        end
      end
      WRITE_DATA_this_state: begin
        if (M_this_start_data_delay_out) begin
          M_this_sprites_ram_write_en = 1'h1;
          M_this_sprites_ram_write_data = IO_port_data_read[0+3-:4];
          M_this_sprites_address_d = M_this_sprites_address_q + 1'h1;
          M_this_state_d = WAIT_this_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_this_external_address_q <= 1'h0;
      M_this_sprites_address_q <= 1'h0;
      M_this_map_address_q <= 1'h0;
      M_this_data_count_q <= 1'h0;
      M_this_state_q <= 1'h0;
    end else begin
      M_this_external_address_q <= M_this_external_address_d;
      M_this_sprites_address_q <= M_this_sprites_address_d;
      M_this_map_address_q <= M_this_map_address_d;
      M_this_data_count_q <= M_this_data_count_d;
      M_this_state_q <= M_this_state_d;
    end
  end
  
endmodule
