/*
   This file was generated automatically by Alchitry Labs version 1.2.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module cu_top_0 (
    input clk,
    input rst_n,
    input [14:0] write_address,
    input [5:0] write_data,
    input write_en,
    output reg hsync,
    output reg vsync,
    output reg hblank,
    output reg vblank,
    output reg [5:0] rgb
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_this_reset_cond_out;
  reg [1-1:0] M_this_reset_cond_in;
  reset_conditioner_1 this_reset_cond (
    .clk(clk),
    .in(M_this_reset_cond_in),
    .out(M_this_reset_cond_out)
  );
  wire [1-1:0] M_this_vga_signals_hsync;
  wire [1-1:0] M_this_vga_signals_hblank;
  wire [1-1:0] M_this_vga_signals_vsync;
  wire [1-1:0] M_this_vga_signals_vblank;
  wire [15-1:0] M_this_vga_signals_address;
  vga_signals_2 this_vga_signals (
    .clk(clk),
    .rst(rst),
    .hsync(M_this_vga_signals_hsync),
    .hblank(M_this_vga_signals_hblank),
    .vsync(M_this_vga_signals_vsync),
    .vblank(M_this_vga_signals_vblank),
    .address(M_this_vga_signals_address)
  );
  
  wire [6-1:0] M_this_vram_read_data;
  reg [15-1:0] M_this_vram_waddr;
  reg [6-1:0] M_this_vram_write_data;
  reg [1-1:0] M_this_vram_write_en;
  reg [15-1:0] M_this_vram_raddr;
  simple_dual_ram_3 #(.SIZE(3'h6), .DEPTH(15'h4b00)) this_vram (
    .rclk(clk),
    .wclk(clk),
    .waddr(M_this_vram_waddr),
    .write_data(M_this_vram_write_data),
    .write_en(M_this_vram_write_en),
    .raddr(M_this_vram_raddr),
    .read_data(M_this_vram_read_data)
  );
  
  always @* begin
    M_this_reset_cond_in = ~rst_n;
    rst = M_this_reset_cond_out;
    M_this_vram_raddr = M_this_vga_signals_address;
    M_this_vram_waddr = write_address;
    M_this_vram_write_data = write_data;
    M_this_vram_write_en = write_en;
    hsync = M_this_vga_signals_hsync;
    vsync = M_this_vga_signals_vsync;
    hblank = M_this_vga_signals_hblank;
    vblank = M_this_vga_signals_vblank;
    rgb = 6'bzzzzzz;
    if (!M_this_vga_signals_hblank && !M_this_vga_signals_vblank) begin
      rgb = M_this_vram_read_data;
    end
  end
endmodule
