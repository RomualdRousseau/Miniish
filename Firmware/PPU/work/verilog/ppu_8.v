/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     WIDTH = WIDTH
     HEIGHT = HEIGHT
     COLORS = COLORS
     MAP_WIDTH = MAP_WIDTH
     MAP_HEIGHT = MAP_HEIGHT
     SPRITESHEET_WIDTH = SPRITESHEET_WIDTH
     SPRITESHEET_HEIGHT = SPRITESHEET_HEIGHT
     SPRITE_WIDTH = SPRITE_WIDTH
     SPRITE_HEIGHT = SPRITE_HEIGHT
     OAM_ENTRY_COUNT = OAM_ENTRY_COUNT
     SPRITES_PER_SCANLINE = 16
*/
module ppu_8 (
    input clk,
    input rst,
    input en,
    input vga_line_clk,
    input vga_is_drawing,
    input [1:0] mask,
    input [15:0] scroll,
    output reg [7:0] vram_addr,
    output reg vram_en,
    output reg [3:0] vram_data,
    output reg [13:0] spr_addr,
    input [3:0] spr_data,
    output reg [9:0] map_addr,
    input [7:0] map_data,
    output reg [5:0] oam_addr,
    input [31:0] oam_data
  );
  
  localparam WIDTH = 8'h80;
  localparam HEIGHT = 8'h80;
  localparam COLORS = 5'h10;
  localparam MAP_WIDTH = 6'h20;
  localparam MAP_HEIGHT = 6'h20;
  localparam SPRITESHEET_WIDTH = 5'h10;
  localparam SPRITESHEET_HEIGHT = 5'h10;
  localparam SPRITE_WIDTH = 4'h8;
  localparam SPRITE_HEIGHT = 4'h8;
  localparam OAM_ENTRY_COUNT = 7'h40;
  localparam SPRITES_PER_SCANLINE = 5'h10;
  
  
  localparam MASK_FG = 1'h1;
  
  localparam MASK_BG = 1'h0;
  
  localparam OAM_ENTRY_TILE_IDX = 1'h0;
  
  localparam OAM_ENTRY_TILE_WIDTH = 4'h8;
  
  localparam OAM_ENTRY_POSX_IDX = 5'h08;
  
  localparam OAM_ENTRY_POSX_WIDTH = 4'h8;
  
  localparam OAM_ENTRY_POSY_IDX = 6'h10;
  
  localparam OAM_ENTRY_POSY_WIDTH = 4'h8;
  
  localparam OAM_ENTRY_FLAGS_IDX = 7'h18;
  
  localparam OAM_ENTRY_FLAGS_WIDTH = 4'h8;
  
  localparam OAM_ENTRY_SIZE = 7'h20;
  
  
  reg [31:0] oam_entry;
  
  reg [7:0] offset_x;
  
  reg [7:0] offset_y;
  
  localparam IDLE_state = 4'd0;
  localparam OAM_LOOP_state = 4'd1;
  localparam OAM_CHECK_IN_SCANLINE_state = 4'd2;
  localparam OAM_WRITE_CACHE_state = 4'd3;
  localparam SCANLINE_LOOP_state = 4'd4;
  localparam OAM_CACHE_LOOP_state = 4'd5;
  localparam OAM_CACHE_CHECK_PIXEL_state = 4'd6;
  localparam OAM_CACHE_WRITE_PIXEL_state = 4'd7;
  localparam TILE_READ_state = 4'd8;
  localparam TILE_WRITE_PIXEL_state = 4'd9;
  localparam CHESS_LOOP_state = 4'd10;
  localparam CHESS_WRITE_PIXEL_state = 4'd11;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  reg [7:0] M_screen_x_d, M_screen_x_q = 1'h0;
  reg [7:0] M_screen_y_d, M_screen_y_q = 1'h0;
  reg [7:0] M_surface_x_d, M_surface_x_q = 1'h0;
  reg [7:0] M_surface_y_d, M_surface_y_q = 1'h0;
  reg [7:0] M_pixel_cnt_d, M_pixel_cnt_q = 1'h0;
  reg [6:0] M_oam_curr_d, M_oam_curr_q = 1'h0;
  reg [4:0] M_oam_cache_cnt_d, M_oam_cache_cnt_q = 1'h0;
  wire [1-1:0] M_line_clk_out;
  reg [1-1:0] M_line_clk_in;
  edge_detector_4 line_clk (
    .clk(clk),
    .in(M_line_clk_in),
    .out(M_line_clk_out)
  );
  
  wire [32-1:0] M_oam_cache_read_data;
  reg [4-1:0] M_oam_cache_waddr;
  reg [32-1:0] M_oam_cache_write_data;
  reg [1-1:0] M_oam_cache_write_en;
  reg [4-1:0] M_oam_cache_raddr;
  simple_dual_ram_13 #(.SIZE(7'h20), .DEPTH(5'h10)) oam_cache (
    .rclk(clk),
    .wclk(clk),
    .waddr(M_oam_cache_waddr),
    .write_data(M_oam_cache_write_data),
    .write_en(M_oam_cache_write_en),
    .raddr(M_oam_cache_raddr),
    .read_data(M_oam_cache_read_data)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_screen_y_d = M_screen_y_q;
    M_screen_x_d = M_screen_x_q;
    M_surface_y_d = M_surface_y_q;
    M_surface_x_d = M_surface_x_q;
    M_oam_curr_d = M_oam_curr_q;
    M_oam_cache_cnt_d = M_oam_cache_cnt_q;
    M_pixel_cnt_d = M_pixel_cnt_q;
    
    M_line_clk_in = vga_line_clk;
    vram_addr = {M_screen_y_q[0+0-:1], M_screen_x_q[0+6-:7]};
    vram_en = 1'h0;
    vram_data = 4'bxxxx;
    map_addr = {M_surface_y_q[3+4-:5], M_surface_x_q[3+4-:5]};
    oam_addr = M_oam_curr_q[0+5-:6];
    spr_addr = 14'bxxxxxxxxxxxxxx;
    M_oam_cache_raddr = M_oam_curr_q[0+3-:4];
    M_oam_cache_waddr = M_oam_cache_cnt_q[0+3-:4];
    M_oam_cache_write_en = 1'h0;
    M_oam_cache_write_data = 1'h0;
    
    case (M_state_q)
      IDLE_state: begin
        if (M_line_clk_out) begin
          M_screen_x_d = 1'h0;
          M_screen_y_d = !vga_is_drawing ? 1'h0 : M_screen_y_q + 1'h1;
          M_surface_x_d = scroll[8+7-:8];
          M_surface_y_d = scroll[0+7-:8] + (!vga_is_drawing ? 1'h0 : M_screen_y_q + 1'h1);
          M_pixel_cnt_d = 8'h80;
          M_oam_curr_d = 1'h0;
          M_oam_cache_cnt_d = 1'h0;
          M_state_d = en ? OAM_LOOP_state : CHESS_LOOP_state;
        end
      end
      OAM_LOOP_state: begin
        if (M_oam_curr_q == 7'h40) begin
          M_state_d = SCANLINE_LOOP_state;
        end else begin
          M_state_d = OAM_CHECK_IN_SCANLINE_state;
        end
      end
      OAM_CHECK_IN_SCANLINE_state: begin
        oam_entry[0+7-:8] = oam_data[0+7-:8];
        oam_entry[16+7-:8] = oam_data[16+7-:8];
        if (oam_entry[0+7-:8] > 1'h0 && (M_surface_y_q - oam_entry[16+7-:8]) <= 5'h07) begin
          M_state_d = OAM_WRITE_CACHE_state;
        end else begin
          M_oam_curr_d = M_oam_curr_q + 1'h1;
          M_state_d = OAM_LOOP_state;
        end
      end
      OAM_WRITE_CACHE_state: begin
        M_oam_cache_write_en = 1'h1;
        M_oam_cache_write_data = oam_data;
        M_oam_curr_d = M_oam_curr_q + 1'h1;
        M_oam_cache_cnt_d = M_oam_cache_cnt_q + 1'h1;
        M_state_d = OAM_LOOP_state;
      end
      SCANLINE_LOOP_state: begin
        if (M_pixel_cnt_q == 1'h0) begin
          M_state_d = IDLE_state;
        end else begin
          M_oam_curr_d = 1'h0;
          M_pixel_cnt_d = M_pixel_cnt_q - 1'h1;
          M_state_d = mask[1+0-:1] ? OAM_CACHE_LOOP_state : TILE_READ_state;
        end
      end
      OAM_CACHE_LOOP_state: begin
        if (M_oam_curr_q[0+4-:5] == M_oam_cache_cnt_q) begin
          M_state_d = TILE_READ_state;
        end else begin
          M_state_d = OAM_CACHE_CHECK_PIXEL_state;
        end
      end
      OAM_CACHE_CHECK_PIXEL_state: begin
        oam_entry[0+7-:8] = M_oam_cache_read_data[0+7-:8];
        oam_entry[8+7-:8] = M_oam_cache_read_data[8+7-:8];
        oam_entry[16+7-:8] = M_oam_cache_read_data[16+7-:8];
        oam_entry[24+7-:8] = M_oam_cache_read_data[24+7-:8];
        offset_x = M_surface_x_q - oam_entry[8+7-:8];
        offset_y = M_surface_y_q - oam_entry[16+7-:8];
        if (offset_x <= 5'h07) begin
          spr_addr = {oam_entry[0+7-:8], offset_y[0+2-:3], offset_x[0+2-:3]};
          M_state_d = OAM_CACHE_WRITE_PIXEL_state;
        end else begin
          M_oam_curr_d = M_oam_curr_q + 1'h1;
          M_state_d = OAM_CACHE_LOOP_state;
        end
      end
      OAM_CACHE_WRITE_PIXEL_state: begin
        oam_entry[0+7-:8] = M_oam_cache_read_data[0+7-:8];
        oam_entry[8+7-:8] = M_oam_cache_read_data[8+7-:8];
        oam_entry[16+7-:8] = M_oam_cache_read_data[16+7-:8];
        oam_entry[24+7-:8] = M_oam_cache_read_data[24+7-:8];
        offset_x = M_surface_x_q - oam_entry[8+7-:8];
        offset_y = M_surface_y_q - oam_entry[16+7-:8];
        spr_addr = {oam_entry[0+7-:8], offset_y[0+2-:3], offset_x[0+2-:3]};
        if (spr_data == 1'h0) begin
          M_oam_curr_d = M_oam_curr_q + 1'h1;
          M_state_d = OAM_CACHE_LOOP_state;
        end else begin
          vram_en = 1'h1;
          vram_data = spr_data;
          M_screen_x_d = M_screen_x_q + 1'h1;
          M_surface_x_d = M_surface_x_q + 1'h1;
          M_state_d = SCANLINE_LOOP_state;
        end
      end
      TILE_READ_state: begin
        spr_addr = {map_data, M_surface_y_q[0+2-:3], M_surface_x_q[0+2-:3]};
        M_state_d = TILE_WRITE_PIXEL_state;
      end
      TILE_WRITE_PIXEL_state: begin
        spr_addr = {map_data, M_surface_y_q[0+2-:3], M_surface_x_q[0+2-:3]};
        vram_en = mask[0+0-:1];
        vram_data = spr_data;
        M_screen_x_d = M_screen_x_q + 1'h1;
        M_surface_x_d = M_surface_x_q + 1'h1;
        M_state_d = SCANLINE_LOOP_state;
      end
      CHESS_LOOP_state: begin
        if (M_pixel_cnt_q == 1'h0) begin
          M_state_d = IDLE_state;
        end else begin
          M_pixel_cnt_d = M_pixel_cnt_q - 1'h1;
          M_state_d = CHESS_WRITE_PIXEL_state;
        end
      end
      CHESS_WRITE_PIXEL_state: begin
        vram_en = 1'h1;
        vram_data = (M_screen_x_q[3+0-:1] ^ M_screen_y_q[3+0-:1]) * M_screen_y_q[3+3-:4];
        M_screen_x_d = M_screen_x_q + 1'h1;
        M_state_d = CHESS_LOOP_state;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_screen_x_q <= 1'h0;
      M_screen_y_q <= 1'h0;
      M_surface_x_q <= 1'h0;
      M_surface_y_q <= 1'h0;
      M_pixel_cnt_q <= 1'h0;
      M_oam_curr_q <= 1'h0;
      M_oam_cache_cnt_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_screen_x_q <= M_screen_x_d;
      M_screen_y_q <= M_screen_y_d;
      M_surface_x_q <= M_surface_x_d;
      M_surface_y_q <= M_surface_y_d;
      M_pixel_cnt_q <= M_pixel_cnt_d;
      M_oam_curr_q <= M_oam_curr_d;
      M_oam_cache_cnt_q <= M_oam_cache_cnt_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
