module vga_signals (
    input clk,        // clock
    input rst,        // reset
    output hsync,
    output hblank,
    output vsync,
    output vblank,
    output address[14]
  ) {
  
  const WIDTH = 128;
  const HEIGHT = 128;
  const PIXEL_SIZE = 3;
  
  const HVA_T = 640;
  const HFP_T = HVA_T + 16;
  const HSP_T = HFP_T + 96;
  const HBP_T = HSP_T + 48;
  
  const VVA_T = 480;
  const VFP_T = VVA_T + 10;
  const VSP_T = VFP_T + 2;
  const VBP_T = VSP_T + 33;

  const HMIN_T = (HVA_T - WIDTH * PIXEL_SIZE) / 2;
  const HMAX_T =  HMIN_T + WIDTH * PIXEL_SIZE;
  const VMIN_T = (VVA_T - HEIGHT * PIXEL_SIZE) / 2;
  const VMAX_T =  VMIN_T + HEIGHT * PIXEL_SIZE;
  
  .clk(clk) {
    .rst(rst) {
      dff hcounter[12];
      dff vcounter[10];
    }
  }
  
  var hvisibility;
  var vvisibility;
  
  always {

    hsync = hcounter.q >= HFP_T && hcounter.q < HSP_T ? 0 : 1;
    vsync = vcounter.q >= VFP_T && vcounter.q  < VSP_T ? 0 : 1;
    
    hvisibility = hcounter.q >= HMIN_T && hcounter.q < HMAX_T ? 1 : 0;
    vvisibility = vcounter.q >= VMIN_T && vcounter.q < VMAX_T ? 1 : 0;
    
    hblank = ~hvisibility;
    vblank = ~vvisibility;
    
    if (hvisibility && vvisibility) {
      address[0+:7] = (hcounter.q - HMIN_T) / PIXEL_SIZE;
      address[7+:7] = (vcounter.q - VMIN_T) / PIXEL_SIZE;
    }
    else {
      address = 0;
    }
}
  
 always {
    
  if (hcounter.q < HBP_T) {
      hcounter.d = hcounter.q + 1; 
  }
  else {
    hcounter.d = 0;

    if (vcounter.q < VBP_T) {
      vcounter.d = vcounter.q + 1;
    } else {
      vcounter.d = 0;
    }
  }
}