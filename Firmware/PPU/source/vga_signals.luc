module vga_signals (
    input clk,        // clock
    input rst,        // reset
    output hsync,
    output hblank,
    output vsync,
    output vblank,
    output address[15]
  ) {
  
  const HVA_T = 640;
  const HFP_T = HVA_T + 16;
  const HSP_T = HFP_T + 96;
  const HBP_T = HSP_T + 48;
  
  const VVA_T = 480;
  const VFP_T = VVA_T + 10;
  const VSP_T = VFP_T + 2;
  const VBP_T = VSP_T + 33;
  
  .clk(clk) {
    .rst(rst) {
      fsm hstate = {HVA, HFP, HSP, HBP};
      dff hcounter[12];
      fsm vstate = {VVA, VFP, VSP, VBP};
      dff vcounter[10];
    }
  }
  
  always {
    hsync = 1;
    hblank = 0;
    hcounter.d = hcounter.q + 1;
    
    vsync = 0;
    vblank = 0;
    
    address = (vcounter.q >> 2) * 160 + (hcounter.q >> 4);
    
    case (hstate.q) {
      hstate.HVA:
        if (hcounter.q == HVA_T * 4 - 1)
          hstate.d = hstate.HFP;
      
      hstate.HFP:
        hblank = 1;
        if (hcounter.q == HFP_T * 4 - 1)
          hstate.d = hstate.HSP;
      
      hstate.HSP:
        hsync = 0;
        hblank = 1;
        if (hcounter.q == HSP_T * 4 - 1)
          hstate.d = hstate.HBP;
      
      hstate.HBP:
        hblank = 1;
        if (hcounter.q == HBP_T * 4 - 1) {
          hstate.d = hstate.HVA;
          hcounter.d = 0;
          vcounter.d = vcounter.q + 1;
        }
    }
    
    case (vstate.q) {
      vstate.VVA:
        if (vcounter.q == VVA_T)
          vstate.d = vstate.VFP;
      
      vstate.VFP:
        vblank = 1;
        if (vcounter.q == VFP_T)
          vstate.d = vstate.VSP;
      
      vstate.VSP:
        vsync = 1;
        vblank = 1;
        if (vcounter.q == VSP_T)
          vstate.d = vstate.VBP;
      
      vstate.VBP:
        vblank = 1;
        if (vcounter.q == VBP_T) {
          vstate.d = vstate.VVA;
          vcounter.d = 0;
        }
    }
  }
}