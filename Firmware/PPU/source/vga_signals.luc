module vga_signals (
    input clk,        // clock
    input rst,        // reset
    output hsync,
    output hblank,
    output vsync,
    output vblank,
    output address[14],
    output new_pixel
  ) {
  
  const WIDTH = 128;
  const HEIGHT = 128;
  const HPIXEL_SIZE = 3;
  const VPIXEL_SIZE = 3;
  
  const HVA_T = 640;
  const HFP_T = HVA_T + 16;
  const HSP_T = HFP_T + 96;
  const HBP_T = HSP_T + 48;
  
  const VVA_T = 480;
  const VFP_T = VVA_T + 10;
  const VSP_T = VFP_T + 2;
  const VBP_T = VSP_T + 33;

  const HMIN_T = (HVA_T - WIDTH * HPIXEL_SIZE) / 2;
  const HMAX_T =  HMIN_T + WIDTH * HPIXEL_SIZE;
  const VMIN_T = (VVA_T - HEIGHT * VPIXEL_SIZE) / 2;
  const VMAX_T =  VMIN_T + HEIGHT * VPIXEL_SIZE;
  
  .clk(clk) {
    .rst(rst) {
      dff hcounter[12];
      dff vcounter[10];
      dff address_buffer[14];
    }
  }
  
  sig hvisibility;
  sig vvisibility; 
  sig haddress[7];
  sig vaddress[7];
  
  always {
    
    // Default Values
    
    address = address_buffer.q;
  
    hsync = hcounter.q >= HFP_T && hcounter.q < HSP_T ? 0 : 1;
    vsync = vcounter.q >= VFP_T && vcounter.q  < VSP_T ? 0 : 1;
    
    hvisibility = hcounter.q >= HMIN_T && hcounter.q < HMAX_T ? 1 : 0;
    vvisibility = vcounter.q >= VMIN_T && vcounter.q < VMAX_T ? 1 : 0;
    
    hblank = ~hvisibility;
    vblank = ~vvisibility;
    
    // Update address
    
    haddress = (hcounter.q - HMIN_T) / HPIXEL_SIZE;
    vaddress = (vcounter.q - VMIN_T) / VPIXEL_SIZE;

    if (hvisibility && vvisibility) {
      address_buffer.d = c{vaddress, haddress};
    }
    else {
      address_buffer.d= 0;
    }
    
    new_pixel = ((hcounter.q - HMIN_T) - haddress * HPIXEL_SIZE) == 0 ? 1 : 0;
  }
  
  always {
    
    // Increment sync counters
      
    if (hcounter.q < HBP_T) {
        hcounter.d = hcounter.q + 1; 
    }
    else {
      hcounter.d = 0;
  
      if (vcounter.q < VBP_T) {
        vcounter.d = vcounter.q + 1;
      }
      else {
        vcounter.d = 0;
      }
    }
  }
}